package awttest;

import java.util.Random;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
public class poinBall {

	//桌面宽度和高度
	private final int TABLE_WIDTH = 300;
	private final int TABLE_HEIGHT = 400;
	//球拍的垂直位置
	private final int RACKET_Y = 340;
	//球拍的高度和宽度
	private final int RACKET_HEIGHT = 20;
	private final int RACKET_WIDTH = 60;
	//小球的大小
	private final int BALL_SIZE = 16;
	private Frame f = new Frame("ball_game");
	//定义随机数
	Random rand = new Random();
	//小球纵向的速度
	private int ySpeed = 10;
	//返回-0.5~0.5之间的比率
	private double xyRate = rand.nextDouble() - 0.5;
	//小球横向速度
	private int xSpeed = (int)(ySpeed*xyRate*2);
	//定义小球坐标
	private int ballX = rand.nextInt(200) + 20;
	private int ballY = rand.nextInt(10) + 20;
	//racketX代表球拍的水平坐标
	private int racketX = rand.nextInt(200);
	private MyCanvas tableArea = new MyCanvas();
	Timer timer;
	//游戏结束标志
	private boolean isLose = false;
	
	public void init()
	{
		
		//设置zhuomain最佳大小
		tableArea.setPreferredSize(new Dimension(TABLE_WIDTH, TABLE_HEIGHT));
		f.add(tableArea);
		//使用匿名内部类定义键盘监听器
		
		
			KeyAdapter keyProcessor = new KeyAdapter()
			{
				public void keyPressed(KeyEvent ke)
				{
					// 按下向左、向右键时，球拍水平坐标分别减少、增加
					if (ke.getKeyCode() == KeyEvent.VK_LEFT)
					{
						if (racketX > 0)
						racketX -= 10;
					}
					if (ke.getKeyCode() == KeyEvent.VK_RIGHT)
					{
						if (racketX < TABLE_WIDTH - RACKET_WIDTH)
						racketX += 10;
					}
				}
			};
		
		//添加事件监听者
		f.addKeyListener(keyProcessor);
		tableArea.addKeyListener(keyProcessor);
		
		ActionListener taskPerformer = new ActionListener() {
			
			
			public void actionPerformed(ActionEvent e) {
				
			
				//如果小球碰到左边
				if(ballX <= 0 || ballX >= TABLE_WIDTH - BALL_SIZE)
				{
					xSpeed -= xSpeed;
				}
				
				if (ballY >= RACKET_Y - BALL_SIZE &&
						(ballX < racketX || ballX > racketX + RACKET_WIDTH))
					{
						timer.stop();
						// 设置游戏是否结束的旗标为true。
						isLose = true;
						tableArea.repaint();
					}
					// 如果小球位于球拍之内，且到达球拍位置，小球反弹
					else if (ballY  <= 0 ||
						(ballY >= RACKET_Y - BALL_SIZE
							&& ballX > racketX && ballX <= racketX + RACKET_WIDTH))
					{
						ySpeed = -ySpeed;
					}
					// 小球坐标增加
					ballY += ySpeed;
					ballX += xSpeed;
					tableArea.repaint();
				}
				
			};
		timer = new Timer(100, taskPerformer);
		timer.start();
		f.pack();
		f.setVisible(true);
		
	}	
	public static void main(String[] args)
	{
	new poinBall().init();
	}
				
			
		
		
	
	
	class MyCanvas extends Canvas
	{
		// 重写Canvas的paint方法，实现绘画
		public void paint(Graphics g)
		{
			// 如果游戏已经结束
			if (isLose)
			{
				g.setColor(new Color(255, 0, 0));
				g.setFont(new Font("Times" , Font.BOLD, 30));
				g.drawString("游戏已结束！" , 50 ,200);
			}
			// 如果游戏还未结束
			else
			{
				// 设置颜色，并绘制小球
				g.setColor(new Color(240, 240, 80));
				g.fillOval(ballX , ballY , BALL_SIZE, BALL_SIZE);
				// 设置颜色，并绘制球拍
				g.setColor(new Color(80, 80, 200));
				g.fillRect(racketX , RACKET_Y
					, RACKET_WIDTH , RACKET_HEIGHT);
			}
		}
	}
}